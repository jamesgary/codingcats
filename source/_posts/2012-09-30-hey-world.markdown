---
layout: post
title: "Building with Sandcastle"
date: 2012-09-30 21:59
comments: true
categories: sandcastle,haml,sass,scss,coffeescript,javascript,html5
---

We all have dreams, right? Let's say, for the moment, that your dream is to make something shiny on the internets. You can say there's two sides to this: front-end and back-end.

The back-end can be anything. _Anything_. Ruby. Python. PHP. One long C statement. One poor intern furiously typing responses to http request as they come in. The point is, you're free to choose whatever you want, depending on your needs, wants, preferences, and experience.

The front-end, on the other hand, allows us less choice. No matter what, you're going to render __HTML__ markup styled by __CSS__, all glitter-glued with __Javascript__. Those are the three languages the browser cares about. The browser, and more importantly, the user, doesn't care about the back-end. And for this blog post, neither will we.

Let's focus on those three front-end languages and how we can make it easier to develop with them. Let's get expressive!

Use Haml over HTML.
Use Sass over CSS.
Use Coffeescript over Javascript.

If you're like most web developers, you've _heard_ about the benefits of these languages, so I won't cover the benefits. There's a very low to learning curve to these languages, so what's holding developers back? I'll tell you what held me back for a while: The Hassle~~hoff~~.

Setting up a good environment can be just plain annoying. There's a lot of upfront work. Documentation for various compilers can be sparse, inconsistent, or misleading. Tweaks upon tweaks upon tweaks to get things just right, and then everything just feels fragile and delicate. Then you have to worry about how to organize your scripts. Do you include a bunch of `<script>` tags in your header, or maybe concatenate them all, but then how do you handle external libraries? It's enough to make you throw your hands in the air as if you don't care and continue sub-optimal practices.

That's why I wanted to built Sandcastle. It lets you:

- Keep your code expressive __with Coffeescript, SASS, and HAML__
- Keep your code organized __with require.js__
- Focus on coding, letting __Guard__ do the busy work

## Requirements

- Linux or OSX environment. Pretty much anything besides Windows. I'm sorry. If you're on Windows, try setting up Ubuntu using VirtualBox. Get your geek on.
- Ruby
- Bundler
- RVM is always handy

## Getting Set Up

Let's say you're making an HTML5 game called _Emplexa_. 

```
git clone MYGITHUBLINK emplexa
cd emplexa
# if it prompts you to trust the rvm, say [y]es
bundle install
```

Now, you'll have to start guard, which, among other things, compiles your Coffeescript, SASS, and HAML.

```
bundle exec guard
```

Just let that run in its own little window, and it will listen for any edits you make.

//Guard doesn't always compile all files on start up, so run `./script/clean` while guard is running to 'force' a recompile.

It's much easier if you test your app through a server to avoid 'local file' security warnings. This project is already set up as a rack app if you run that following in your shell console:

```
rackup
open http://localhost:9292/public/dev/index.html
```

If you see a thumbs up, that means you're good to go. If not, check out the troubleshooting section.

---

## Developing with Sandcastle

Let's walk through how you'd make a Game of Life simulator... and just to make it interesting, we'll use WebGL! To give you an idea of what we're aiming for, check out the final demo.

We'll start off from the ground up, with the markup first. Open `markup/index.html.haml`. It's already got your typical HTML5 boilerplate, so let's just replace the body with what we need to get started:

```haml
%body
  %canvas
  .dashboard
    %h1 Game of Life - Powered by WebGL
    %a.button.playToggler.pause{:title => 'Pause'} I I
```

Eventually, the canvas element will expand to the entire window and the dashboard will overlay it in a beautiful transparent way. We'll do that with the power of SASS! Open up `style/style.scss` and just add this:

```sass
stuff
```

Cool, now we're looking good. Well, except for the heart of the application. Let's dig into it. All your scripts will live in app. Here's how I like to organize my scripts:

`bootstrap.coffee`:  sets up requirejs' configuration and starts the app as a whole (ideally in one line referencing the controller)
`controller.coffee`: the 'glue' code between the browser (like the DOM and user input), and the 'meat' of the code
`lib` directory: contains any script that isn't part of your domain (i.e., it could just as easily belong in another project)
`models` directory: contains the scripts that truly make up your app
`views` directory: contains scripts that pertain purely with rendering the visuals (handy for multiplatform games)

Here's our simple bootstrap, keeping jquery since we know we'll use it in the controller.

```
uhh....
```



######
######
######

- Keep the code organized with require.js
- Keep the code expressive with Coffeescript, SASS, and HAML
- Keep the code streamlined with Guard
- Play around with WebGL from the ground up
-   In hindsight, using a library like Three.js would have been less of a headache

but you also wanna have good coding standards? i.e. organized? i.e. not a pain to edit? i.e. readable?

You've got two options: Bow down to a framework (may not be a bad thing... but you ought to treat it like a library and not a framework, which there isn't always a lot of documentation)
OR you're on your own. Republican style. Borrow from your parents.

BUT HARK. OFF IN DISTANCE.

REQUIRE.JS

It's pretty cool. Let's your keep your shit in it's place. Frees you from having to make one monolithic app. Frees you from dabbling in markup. Frees you from untestable code.

Let's get jiggy with it.

gg
Dreams can come true. Here are the ingredients for doing so:
